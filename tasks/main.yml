---
- name: Include OS-Specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- include_tasks: setup-vars.yml

- name: Ensure ClamAV packages are installed.
  become: true
  package: name={{ item }} state=present
  with_items: "{{ clamav_packages }}"
  register: clamav_packages_install

- name: Run freshclam after ClamAV packages change.
  become: true
  command: freshclam
  when: clamav_packages_install.changed
  register: freshclam_result
  notify: restart clamav daemon
  # On Debian, freshclam is automatically run post-install, so this may fail.
  failed_when:
    - freshclam_result is failed
    - freshclam_result.stderr.find('locked by another process') != -1
  tags: ['skip_ansible_lint']

- name: Ensure Freshclam service is available.
  template:
    src: clamd-freshclam.service.j2
    dest: /lib/systemd/system/clamd-freshclam.service
    mode: 0644
  register: freshclam_service_template

- name: Copy over ClamAV config file
  become: true
  template:
    src: clamav.conf.j2
    dest: "{{ clamav_daemon_config_path }}"
    owner: root
    group: root
    mode: 0644

- name: Copy over clamdscan.service file
  become: true
  template:
    src: clamdscan.service.j2
    dest: /etc/systemd/system/clamdscan.service
    owner: root
    group: root
    mode: 0644

- name: Copy over clamdscan.timer file
  become: true
  copy:
    src: clamdscan.timer
    dest: /etc/systemd/system/clamdscan.timer
    owner: root
    group: root
    mode: 0644

- name: Copy over clamonacc.service file
  become: true
  template:
    src: clamonacc.service.j2
    dest: /etc/systemd/system/clamonacc.service
    owner: root
    group: root
    mode: 0644
  when: ansible_facts['distribution'] == "Ubuntu"

- name: Copy over clamdscan logrotate file
  become: true
  template:
    src: clamdscan.j2
    dest: /etc/logrotate.d/clamdscan
    owner: root
    group: root
    mode: 0644

- name: Copy over clamonacc logrotate file
  become: true
  template:
    src: clamonacc.j2
    dest: /etc/logrotate.d/clamonacc
    owner: root
    group: root
    mode: 0644

- name: Scribble clamdscan and clamonacc into logrotate state
  become: true
  command:
    cmd: logrotate /etc/logrotate.conf
  changed_when: false

- name: Change configuration for the ClamAV daemon.
  lineinfile:
    path: "{{ clamav_daemon_config_path }}"
    regexp: '{{ item.regexp }}'
    line: "{{ item.line | default('') }}"
    state: "{{ item.state | default('present') }}"
    mode: 0644
  with_items: "{{ clamav_daemon_configuration_changes }}"
  when: ansible_facts['distribution'] == "Ubuntu"

- name: Reload systemd after adding service (freshclam).
  systemd:
    state: stopped
    daemon_reload: true
    name: "{{ clamav_freshclam_daemon }}"
  when: freshclam_service_template.changed

- name: Reload systemd after adding service (clamdscan.service).
  systemd:
    state: stopped
    daemon_reload: true
    name: "clamdscan.service"

- name: Reload systemd after adding service (clamdscan.timer).
  systemd:
    state: stopped
    daemon_reload: true
    name: "clamdscan.timer"

- name: Reload systemd after adding service (clamonacc.service).
  systemd:
    state: stopped
    daemon_reload: true
    name: "clamonacc.service"

- name: Ensure ClamAV daemon is running (if configured).
  become: true
  service:
    name: "{{ clamav_daemon }}"
    state: "{{ clamav_daemon_state }}"
    enabled: "{{ clamav_daemon_enabled }}"

- name: Ensure ClamAV freshclam daemon is running (if configured).
  become: true
  service:
    name: "{{ clamav_freshclam_daemon }}"
    state: "{{ clamav_freshclam_daemon_state }}"
    enabled: "{{ clamav_freshclam_daemon_enabled }}"

- name: Ensure ClamAV clamdscan service is disabled (no scans on reboot).
  become: true
  service:
    name: "clamdscan.service"
    enabled: false

- name: Ensure ClamAV clamdscan timer is enabled.
  become: true
  service:
    name: "clamdscan.timer"
    enabled: true
    state: started

- name: Ensure ClamAV clamonacc service is enabled.
  become: true
  service:
    name: "clamonacc.service"
    enabled: true
    state: started
